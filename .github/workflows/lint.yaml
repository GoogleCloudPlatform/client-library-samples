on:
  workflow_call:
    inputs:
      head-sha:
        description: The SHA of the head commit.
        required: true
        type: string
      paths:
        description: A JSON list of package paths.
        required: true
        type: string
      node-version:
        description: The version of Node to use.
        default: "24"
        type: string
      python-version:
        description: The version of Python to use.
        default: "3.13"
        type: string
      timeout-minutes:
        description: The maximum number of minutes to run the job.
        default: 5
        type: number
      expect-failure:
        description: Whether to expect this to fail.
        default: false
        type: boolean

jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.timeout-minutes }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          ref: ${{ inputs.head-sha }}
      - name: Setup Node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: ${{ inputs.node-version }}
      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ inputs.python-version }}
      - name: Setup tooling
        run: bash .github/custard/setup.sh
      - name: Run lint
        id: lint
        continue-on-error: ${{ inputs.expect-failure }}
        # Do not use env.PATHS since it will expand the JSON contents into
        # the terminal and the quotes will be messed up.
        run: bash .github/custard/map.sh ".github/custard/run.sh lint" "$PATHS"
        env:
          PATHS: ${{ inputs.paths }}
      - name: Expect failure
        # Both steps.lint.conclusion and steps.lint.result will be 'success'
        # if continue-on-error is true. Only steps.lint.outcome will be 'failure'.
        # https://www.kenmuse.com/blog/how-to-handle-step-and-job-errors-in-github-actions
        if: ${{ inputs.expect-failure && steps.lint.outcome != 'failure' }}
        run: echo "This was expected to fail." && exit 1
